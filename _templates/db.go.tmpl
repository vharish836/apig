package db

import (
	"log"
	
{{ if (eq .Database "sqlite") }}	"path/filepath"
	"os"
{{ end -}}
	"strings"

	"{{ .ImportDir }}/models"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/{{ .Database }}"
	"github.com/serenize/snaker"
)

{{ if (eq .Database "sqlite") -}}
func Connect(am bool) *gorm.DB {
	dir := filepath.Dir("db/database.db")
	err := os.MkdirAll(dir, os.ModePerm)
    if err != nil {
        log.Fatalf("Failed to create directory for db: %s", err)
    }
	db, err := gorm.Open("sqlite3", dir+"/database.db")
{{ else if (eq .Database "postgres") -}}
func Connect(dbURL string, am bool) *gorm.DB {
	db, err := gorm.Open("postgres", dbURL)
{{ else if (eq .Database "mysql") -}}
func Connect(dbURL string, am bool) *gorm.DB {
	db, err := gorm.Open("mysql", dbURL)
{{ end -}}
	if err != nil {
		log.Fatalf("Got error when connect database, the error is '%v'", err)
	}

	db.LogMode(false)

	if gin.IsDebugging() {
		db.LogMode(true)
	}

	if am {
		db.AutoMigrate({{ range .Models }}
			&models.{{ .Name }}{},{{ end }}
		)
	}

	return db
}

func Instance(c *gin.Context) *gorm.DB {
	return c.MustGet("DB").(*gorm.DB)
}

func (p *Parameter) SetPreloads(db *gorm.DB) *gorm.DB {
	if p.Preloads == "" {
		return db
	}

	for _, preload := range strings.Split(p.Preloads, ",") {
		var a []string

		for _, s := range strings.Split(preload, ".") {
			a = append(a, snaker.SnakeToCamel(s))
		}

		db = db.Preload(strings.Join(a, "."))
	}

	return db
}
